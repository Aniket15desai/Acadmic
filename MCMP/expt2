add//
global _start:
section .text:
_start:
mov eax, 10
mov ebx, 5
add eax, ebx
mov eax, 1
int 0x80

add3//

global _start
section .text
_start:
mov eax, 10
mov ebx, 5
add eax, ebx
mov ecx, 6
add eax, ecx
mov eax, 1
int 0x80

// divCon

section .text
global _start
_start:
        mov ax, '0'
        sub ax, '0'

        mov bl, '2'
        sub bl, '0'
        div bl
        add ax, '0'

        mov [res], ax
        mov ecx, msg
        mov edx, len
        mov ebx, 1
        mov eax, 4
        int 0x80

        mov ecx, res
        mov edx, 1
        mov ebx, 1
        mov eax, 4
        int 0x80

        mov ecx, res
        mov edx, 1
        mov ebx, 4
        int 0x80

        mov eax, 1
        int 0x80

section .data
msg db "The result is:", 0xA, 0xD
len equ $- msg
segment .bss
res resb 1


// Mul

section .text:
global _start:
_start:
mov al, '3'
sub al, '0'
mov bl, '2'
sub bl, '0'
mul bl
add al, '0'

mov [res], al
mov ecx, msg
mov edx, len
mov ebx, 1
mov eax, 4
int 0x80

mov ecx, res
mov edx, 1
mov ebx, 1
mov eax, 4
int 0x80

mov eax, 1
int 0x80

section .data:
msg db "The result is:", 0xA, 0xD
len equ $-msg
segment .bss
res resb 0

//mulCon

section .text
global _start
_start:
        mov al, '3'
        sub al, '0'

        mov bl, '2'
        sub bl, '0'
        mul bl
        add al, '0'

        mov [res], al
        mov ecx, msg
        mov edx, len
        mov ebx, 1
        mov eax, 4
        int 0x80

        mov ecx, res
        mov edx, 1
        mov ebx, 1
        mov eax, 4
        int 0x80

        mov eax, 1
        int 0x80

section .data
msg db "The result is: ", 0xA, 0xD
len equ $- msg
segment .bss
res resb 1

// uiAdd

SYS_EXIT equ 1
SYS_READ equ 3
SYS_WRITE equ 4
STDIN equ 0
STDOUT equ 1

section .data
        msg1 db "Enter a digit ", 0xA, 0xD
        len1 equ $- msg1

        msg2 db "Please enter a second digit", 0xA, 0xD
        len2 equ $- msg2

        msg3 db "The sum is: "
        len3 equ $- msg3

section .bss
        num1 resb 2
        num2 resb 2
        res resb 2

section .text
        global _start
        _start:
        mov eax, SYS_WRITE
        mov ebx, STDOUT
        mov ecx, msg1
        mov edx, len1
        int 0x80

        mov eax, SYS_READ
        mov ebx, STDIN
        mov ecx, num1
        mov edx, 2
        int 0x80

        mov eax, SYS_WRITE
        mov ebx, STDOUT
        mov ecx, msg2
        mov edx, len2
        int 0x80

        mov eax, SYS_READ
        mov ebx, STDIN
        mov ecx, num2
        mov edx, 2
        int 0x80

        mov eax, SYS_WRITE
        mov ebx, STDOUT
        mov ecx, msg3
        int 0x80

        mov eax, [num1]
        sub eax, '0'

        mov ebx, [num2]
        sub ebx, '0'

        add eax, ebx
        add eax, '0'

        mov [res], eax

        mov eax, SYS_WRITE
        mov ebx, STDOUT
        mov ecx, res
        mov edx, 1
        int 0x80

exit:
        mov eax, SYS_EXIT
        mov ebx, ebx
        int 0x80


// UserDiv

SYS_EXIT equ 1
SYS_READ equ 3
SYS_WRITE equ 4
STDIN equ 0
STDOUT equ 1

section .data
        msg1 db "Enter a digit ", 0xA, 0xD
        len1 equ $- msg1

        msg2 db "Please enter a second digit", 0xA, 0xD
        len2 equ $- msg2

        msg3 db "The quotient is: "
        len3 equ $- msg3

section .bss
        num1 resb 2
        num2 resb 2
        res resb 2

section .text
        global _start
        _start:
        mov eax, SYS_WRITE
        mov ebx, STDOUT
        mov ecx, msg1
        mov edx, len1
        int 0x80

        mov eax, SYS_READ
        mov ebx, STDIN
        mov ecx, num1
        mov edx, 2
        int 0x80

// div
section .text
global _start
_start:
mov ax, '8'
sub ax, '0'

mov bl, '2'
sub bl, '0'
div bl
add ax, '0'

mov [res], ax
mov ecx, msg
mov edx, len
mov ebx, 1
mov eax, 4
int 0x80

mov ecx, res
mov edx, 1
mov ebx, 1
mov eax, 4
int 0x80

mov eax, 1
int 0x80

section .data
msg db "The result is:", 0xA, 0xD
len equ $- msg
segment .bss
res resb 1


//LargestMac

section .text
        Global _start

_start:
        mov ecx, [num1]
        cmp ecx, [num2]
        jg check_third_num
        mov ecx, [num2]

check_third_num:
        cmp ecx, [num3]
        jg _exit
        mov ecx, [num3]

_exit:
        mov [largest], ecx
        mov ecx, msg
        mov edx, len
        mov ebx, 1
        mov eax, 4
        int 0x80

        mov ecx, largest
        mov edx, 2
        mov ebx, 1
        mov eax, 4
        int 0x80

section .text
        global _start

_start:
        mov ecx, [num1]
        cmp ecx, [num2]
        jg check_third_num
        mov ecx, [num2]

check_third_num:
        cmp ecx, [num3]
        jg _exit
        mov ecx, [num3]

_exit:
        mov [largest], ecx
        mov ecx, msg
        mov edx, len
        mov ebx, 1
        mov eax, 4
        int 0x80

        mov ecx, largest
        mov edx, 2
        mov ebx, 1
        mov eax, 4
        int 0x80

        mov eax, 1
        int 80h

section .data
        msg db "The largest digit is: ", 0xA, 0xD
        len equ $- msg
        num1 dd '9'
        num2 dd '3'
        num3 dd '4'

segment .bss
        largest resb 2

// macroDemo

%macro print 2
mov eax, 4
mov ebx, 1
mov ecx, %1
mov edx, %2
int 0x80
%endmacro

segment .text
global _start
_start:
print msg, len
mov eax, 1
int 0x80

segment .data
msg db 'Hello, World!'
len equ $ -msg


// sumLoop

section .text
global _start

_start:

mov eax, 3
mov ebx, 0
mov ecx, x

top: add ebx, [ecx]
add ecx, 1
dec eax
jnz top

done:
add ebx, '0'
mov [sum], ebx

display:
mov edx, 1
mov ecx, sum
mov ebx, 1
mov eax, 4
int 0x80

mov eax, 1
int 0x80

section .data
global x
x:
db 2
db 4
db 3
sum:
db 0
